@using Newtonsoft.Json;
@model AiTimanMVC.Models.AppointmentViewModel
@{
    ViewData["Title"] = "Set Appointment";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}
<div class="content-body">
    <div class="container">
        <!-- Left Side: Appointment Form -->
        <div class="form-container">
            <h3 class="form-title">@ViewData["Title"]</h3>

            <form asp-action="Appointment" method="post">
                <div asp-validation-summary="All" class="text-danger"></div>

                <!-- Appointment Name -->
                <div class="form-floating mb-3">
                    <input asp-for="AppointmentName" class="form-control" required />
                    <label asp-for="AppointmentName">Appointment Name</label>
                    <span asp-validation-for="AppointmentName" class="text-danger"></span>
                </div>

                <!-- Schedule Date -->
                <div class="form-floating mb-3">
                    <input asp-for="ScheduleDate" class="form-control" type="date" required />
                    <label asp-for="ScheduleDate">Schedule Date</label>
                    <span asp-validation-for="ScheduleDate" class="text-danger"></span>
                </div>

                <!-- Start Time -->
                <div class="form-floating mb-3">
                    <div class="d-flex justify-content-between">
                        <div class="flex-fill me-2">
                            <input asp-for="ScheduleTime.StartTime" class="form-control" type="time" required id="start-time" />
                            <label asp-for="ScheduleTime.StartTime">Start Time</label>
                            <span asp-validation-for="ScheduleTime.StartTime" class="text-danger"></span>
                        </div>
                        <div class="flex-fill ms-2">
                            <input asp-for="ScheduleTime.EndTime" class="form-control" type="time" required id="end-time" />
                            <label asp-for="ScheduleTime.EndTime">End Time</label>
                            <span asp-validation-for="ScheduleTime.EndTime" class="text-danger"></span>
                        </div>
                    </div>
                </div>

                <!-- Schedule Time Slots (Generated Based on Start/End Time) -->
                <!-- Doctor In Charge -->
                <div class="form-floating mb-3">
                    <input asp-for="DoctorInCharge" class="form-control" required />
                    <label asp-for="DoctorInCharge">Doctor In Charge</label>
                    <span asp-validation-for="DoctorInCharge" class="text-danger"></span>
                </div>

                <!-- Appointment Setter (Read-only, current user) -->
                <div class="form-floating mb-3">
                    <input type="text" class="form-control" value="@ViewBag.CurrentUser?.UserName" readonly />
                    <label>Appointment Setter</label>
                </div>

                <!-- Submit Button -->
                <button type="submit" value="Appointment" class="btn btn-lg btn-primary w-100">Set Appointment</button>
            </form>
        </div>

        <!-- Right Side: Calendar Picker -->
        <div class="calendar-container">
            <h3>Select Available Slot</h3>
            <div class="calendar-navigation">
                <button id="prev-month">&lt;</button>
                <span id="month-year"></span>
                <button id="next-month">&gt;</button>
            </div>
            <div class="calendar" id="calendar">
                <div class="calendar-header">
                    <div>Sun</div>
                    <div>Mon</div>
                    <div>Tue</div>
                    <div>Wed</div>
                    <div>Thu</div>
                    <div>Fri</div>
                    <div>Sat</div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
        const appointmentDates = @Html.Raw(JsonConvert.SerializeObject(Model.AppointmentDates));

    document.addEventListener('DOMContentLoaded', function () {
        const calendarElement = document.getElementById('calendar');
        const monthYearElement = document.getElementById('month-year');
        const prevMonthButton = document.getElementById('prev-month');
        const nextMonthButton = document.getElementById('next-month');

        // Fetch the ScheduleDate input element
        const scheduleDateInput = document.querySelector('input[name="ScheduleDate"]');

        // Fix timezone issue when setting ScheduleDate
        scheduleDateInput.addEventListener('change', function () {
            const selectedDate = new Date(scheduleDateInput.value);

            // Get the local timezone offset in minutes and adjust the selected date by subtracting the offset
            const timezoneOffsetInMinutes = selectedDate.getTimezoneOffset();
            selectedDate.setMinutes(selectedDate.getMinutes() - timezoneOffsetInMinutes);

            // Format the date to yyyy-MM-dd without converting to UTC
            const formattedDate = selectedDate.getFullYear() + '-' +
                String(selectedDate.getMonth() + 1).padStart(2, '0') + '-' +
                String(selectedDate.getDate()).padStart(2, '0');

            scheduleDateInput.value = formattedDate;
        });

        let currentDate = new Date();

        // Generate Calendar
        function generateCalendar(date) {
            calendarElement.innerHTML = '';
            const year = date.getFullYear();
            const month = date.getMonth();

            const firstDay = new Date(year, month, 1).getDay();
            const lastDate = new Date(year, month + 1, 0).getDate();

            for (let i = 0; i < firstDay; i++) {
                const emptyDiv = document.createElement('div');
                calendarElement.appendChild(emptyDiv);
            }

            for (let day = 1; day <= lastDate; day++) {
                const dayDiv = document.createElement('div');
                dayDiv.className = 'calendar-day';
                dayDiv.innerText = day;

                const currentDay = new Date(year, month, day);
                const dayOfWeek = currentDay.getDay();

                if (dayOfWeek === 0) {
                    dayDiv.style.color = 'red'; // Highlight Sundays
                }

                const appointmentMatch = appointmentDates.some(appointmentDate => {
                    const apptDate = new Date(appointmentDate);
                    return apptDate.getFullYear() === currentDay.getFullYear() &&
                        apptDate.getMonth() === currentDay.getMonth() &&
                        apptDate.getDate() === currentDay.getDate();
                });

                if (appointmentMatch) {
                    dayDiv.style.backgroundColor = '#ffcccb'; // Highlight dates with appointments
                }

                calendarElement.appendChild(dayDiv);
            }

            monthYearElement.innerText = `${date.toLocaleString('default', { month: 'long' })} ${year}`;
        }

        prevMonthButton.addEventListener('click', function () {
            currentDate.setMonth(currentDate.getMonth() - 1);
            generateCalendar(currentDate);
        });

        nextMonthButton.addEventListener('click', function () {
            currentDate.setMonth(currentDate.getMonth() + 1);
            generateCalendar(currentDate);
        });

        generateCalendar(currentDate);

        // Handle Time Slot Generation Based on Start/End Time
        const startTimeInput = document.getElementById('start-time');
        const endTimeInput = document.getElementById('end-time');
        const timeSlotSelect = document.getElementById('time-slots');

        startTimeInput.addEventListener('change', generateTimeSlots);
        endTimeInput.addEventListener('change', generateTimeSlots);

        function generateTimeSlots() {
            timeSlotSelect.innerHTML = ''; // Clear existing options

            const startTime = startTimeInput.value;
            const endTime = endTimeInput.value;

            if (startTime && endTime) {
                let start = new Date(`1970-01-01T${startTime}`);
                const end = new Date(`1970-01-01T${endTime}`);

                while (start < end) {
                    const slot = start.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
                    const option = document.createElement('option');
                    option.value = slot;
                    option.text = slot;
                    timeSlotSelect.appendChild(option);

                    start.setHours(start.getHours() + 1); // 1-hour interval
                }
            }
        }
    });
</script>


<style>
    body {
        font-family: 'Arial', sans-serif;
        background-color: #f4f4f4;
        margin: 0;
    }

    .container {
        display: flex;
        justify-content: space-between;
        gap: 20px;
        max-width: 1200px;
        margin: auto;
        padding: 20px;
    }

    .form-container, .calendar-container {
        background-color: white;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 8px 16px rgba(173, 216, 230, 0.4), 0 6px 20px rgba(173, 216, 230, 0.3);
    }

    .form-title {
        text-align: center;
        font-size: 1.5rem;
        margin-bottom: 1.5rem;
        color: #333;
    }

    .form-floating {
        margin-bottom: 1.5rem;
    }

    button {
        width: 100%;
        padding: 15px;
        background-color: #007bff;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 1rem;
        transition: background 0.3s;
    }

    .calendar {
        display: grid;
        grid-template-columns: repeat(7, 1fr);
        gap: 10px;
        background: #f8f9fa;
        padding: 10px;
        border-radius: 8px;
    }

    .calendar-day {
        padding: 15px;
        background: #ffffff;
        text-align: center;
        border: 1px solid #e0e0e0;
        border-radius: 5px;
        cursor: pointer;
        font-weight: bold;
        font-size: 14px;
    }

        .calendar-day:hover {
            background-color: #e9ecef;
        }

    .calendar-navigation {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
    }

    .calendar-header div {
        font-weight: bold;
        text-align: center;
    }

    .calendar-day[style*="background-color: #ffcccb"] {
        background-color: steelblue !important; /* Stronger red for better visibility */
    }
</style>
